"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const o=require("effect"),g=require("@octokit/rest"),P=require("@skelegit/core");function b(l,a){return o.Effect.tryPromise({try:async()=>{var s,n;if(!a)return new g.Octokit({auth:((s=l.auth)==null?void 0:s.token)||((n=l.auth)==null?void 0:n.password),baseUrl:l.baseUrl,...l.options});const i=new P.GitHubAuthProvider;await o.Effect.runPromise(a.registerProvider(i));let r={};if(l.authCredentialId)r=await o.Effect.runPromise(a.getAuthHeaders(l.authCredentialId));else if(l.auth){const c=await o.Effect.runPromise(a.createCredentials("github",l.auth));r=await o.Effect.runPromise(a.getAuthHeaders(c))}const t=r.Authorization;let e;return t&&(t.startsWith("token ")?e=t.substring(6):t.startsWith("Bearer ")?e=t.substring(7):t.startsWith("Basic ")&&(e=t)),new g.Octokit({auth:e,baseUrl:l.baseUrl||"https://api.github.com",...l.options})},catch:i=>new Error(`Failed to create authenticated Octokit: ${i}`)})}class w{constructor(a){this.octokit=a}static create(a,i){return o.Effect.map(b(a,i),r=>new w(r))}getRepository(a,i){return o.Effect.tryPromise({try:async()=>{const{data:r}=await this.octokit.rest.repos.get({owner:a,repo:i});return{id:r.id.toString(),name:r.name,fullName:r.full_name,description:r.description||void 0,defaultBranch:r.default_branch,isPrivate:r.private,url:r.html_url,cloneUrl:r.clone_url,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)}},catch:r=>new Error(`Failed to get repository: ${r}`)})}listRepositories(a){return o.Effect.tryPromise({try:async()=>{const{data:i}=a?await this.octokit.rest.repos.listForUser({username:a}):await this.octokit.rest.repos.listForAuthenticatedUser();return i.map(r=>({id:r.id.toString(),name:r.name,fullName:r.full_name,description:r.description||void 0,defaultBranch:r.default_branch||"main",isPrivate:r.private,url:r.html_url,cloneUrl:r.clone_url||"",createdAt:new Date(r.created_at||""),updatedAt:new Date(r.updated_at||"")}))},catch:i=>new Error(`Failed to list repositories: ${i}`)})}getPullRequest(a,i,r){return o.Effect.tryPromise({try:async()=>{var e,s,n,c,u;const{data:t}=await this.octokit.rest.pulls.get({owner:a,repo:i,pull_number:r});return{id:t.id.toString(),number:t.number,title:t.title,description:t.body||void 0,state:t.state,sourceBranch:t.head.ref,targetBranch:t.base.ref,author:{id:((e=t.user)==null?void 0:e.id.toString())||"",username:((s=t.user)==null?void 0:s.login)||"",displayName:((n=t.user)==null?void 0:n.name)||void 0,email:((c=t.user)==null?void 0:c.email)||void 0,avatarUrl:((u=t.user)==null?void 0:u.avatar_url)||void 0},createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at),url:t.html_url}},catch:t=>new Error(`Failed to get pull request: ${t}`)})}listPullRequests(a,i,r="open"){return o.Effect.tryPromise({try:async()=>{const{data:t}=await this.octokit.rest.pulls.list({owner:a,repo:i,state:r});return t.map(e=>{var s,n,c,u,d;return{id:e.id.toString(),number:e.number,title:e.title,description:e.body||void 0,state:e.state,sourceBranch:e.head.ref,targetBranch:e.base.ref,author:{id:((s=e.user)==null?void 0:s.id.toString())||"",username:((n=e.user)==null?void 0:n.login)||"",displayName:((c=e.user)==null?void 0:c.name)||void 0,email:((u=e.user)==null?void 0:u.email)||void 0,avatarUrl:((d=e.user)==null?void 0:d.avatar_url)||void 0},createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),url:e.html_url}})},catch:t=>new Error(`Failed to list pull requests: ${t}`)})}getFile(a,i,r,t){return o.Effect.tryPromise({try:async()=>{const{data:e}=await this.octokit.rest.repos.getContent({owner:a,repo:i,path:r,ref:t});if(Array.isArray(e))throw new Error("Path is a directory, not a file");if(e.type!=="file")throw new Error("Path is not a file");return{path:e.path,name:e.name,type:"file",size:e.size,content:e.content?globalThis.Buffer.from(e.content,"base64").toString():void 0,sha:e.sha}},catch:e=>new Error(`Failed to get file: ${e}`)})}listFiles(a,i,r="",t){return o.Effect.tryPromise({try:async()=>{const{data:e}=await this.octokit.rest.repos.getContent({owner:a,repo:i,path:r,ref:t});return Array.isArray(e)?e.map(s=>({path:s.path,name:s.name,type:s.type==="dir"?"directory":"file",size:s.size,sha:s.sha})):[e].map(s=>({path:s.path,name:s.name,type:s.type==="dir"?"directory":"file",size:s.size,sha:s.sha}))},catch:e=>new Error(`Failed to list files: ${e}`)})}getBranch(a,i,r){return o.Effect.tryPromise({try:async()=>{const{data:t}=await this.octokit.rest.repos.getBranch({owner:a,repo:i,branch:r});return{name:t.name,sha:t.commit.sha,isDefault:!1,isProtected:t.protected}},catch:t=>new Error(`Failed to get branch: ${t}`)})}listBranches(a,i){return o.Effect.tryPromise({try:async()=>{const{data:r}=await this.octokit.rest.repos.listBranches({owner:a,repo:i});return r.map(t=>({name:t.name,sha:t.commit.sha,isDefault:!1,isProtected:t.protected}))},catch:r=>new Error(`Failed to list branches: ${r}`)})}getCommit(a,i,r){return o.Effect.tryPromise({try:async()=>{var e,s,n,c,u,d,m,h,f,y,p;const{data:t}=await this.octokit.rest.repos.getCommit({owner:a,repo:i,ref:r});return{sha:t.sha,message:t.commit.message,author:{id:((e=t.author)==null?void 0:e.id.toString())||"",username:((s=t.author)==null?void 0:s.login)||"",displayName:((n=t.commit.author)==null?void 0:n.name)||void 0,email:((c=t.commit.author)==null?void 0:c.email)||void 0,avatarUrl:((u=t.author)==null?void 0:u.avatar_url)||void 0},committer:{id:((d=t.committer)==null?void 0:d.id.toString())||"",username:((m=t.committer)==null?void 0:m.login)||"",displayName:((h=t.commit.committer)==null?void 0:h.name)||void 0,email:((f=t.commit.committer)==null?void 0:f.email)||void 0,avatarUrl:((y=t.committer)==null?void 0:y.avatar_url)||void 0},createdAt:new Date(((p=t.commit.author)==null?void 0:p.date)||""),url:t.html_url,parents:t.parents.map(v=>v.sha)}},catch:t=>new Error(`Failed to get commit: ${t}`)})}listCommits(a,i,r){return o.Effect.tryPromise({try:async()=>{const{data:t}=await this.octokit.rest.repos.listCommits({owner:a,repo:i,sha:r});return t.map(e=>{var s,n,c,u,d,m,h,f,y,p,v;return{sha:e.sha,message:e.commit.message,author:{id:((s=e.author)==null?void 0:s.id.toString())||"",username:((n=e.author)==null?void 0:n.login)||"",displayName:((c=e.commit.author)==null?void 0:c.name)||void 0,email:((u=e.commit.author)==null?void 0:u.email)||void 0,avatarUrl:((d=e.author)==null?void 0:d.avatar_url)||void 0},committer:{id:((m=e.committer)==null?void 0:m.id.toString())||"",username:((h=e.committer)==null?void 0:h.login)||"",displayName:((f=e.commit.committer)==null?void 0:f.name)||void 0,email:((y=e.commit.committer)==null?void 0:y.email)||void 0,avatarUrl:((p=e.committer)==null?void 0:p.avatar_url)||void 0},createdAt:new Date(((v=e.commit.author)==null?void 0:v.date)||""),url:e.html_url,parents:e.parents.map(E=>E.sha)}})},catch:t=>new Error(`Failed to list commits: ${t}`)})}}const _={name:"octokit",provider:"github",createClient:(l,a)=>w.create(l,a)};exports.OctokitClient=w;exports.octokitPlugin=_;
